// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmpserver/plugin/plugin.proto

package apiclient

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AppStreamRequest is the request object used to send the application's
// files over a stream.
type AppStreamRequest struct {
	// Types that are valid to be assigned to Request:
	//	*AppStreamRequest_Metadata
	//	*AppStreamRequest_File
	Request              isAppStreamRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AppStreamRequest) Reset()         { *m = AppStreamRequest{} }
func (m *AppStreamRequest) String() string { return proto.CompactTextString(m) }
func (*AppStreamRequest) ProtoMessage()    {}
func (*AppStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{0}
}
func (m *AppStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppStreamRequest.Merge(m, src)
}
func (m *AppStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppStreamRequest proto.InternalMessageInfo

type isAppStreamRequest_Request interface {
	isAppStreamRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AppStreamRequest_Metadata struct {
	Metadata *ManifestRequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}
type AppStreamRequest_File struct {
	File *File `protobuf:"bytes,2,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

func (*AppStreamRequest_Metadata) isAppStreamRequest_Request() {}
func (*AppStreamRequest_File) isAppStreamRequest_Request()     {}

func (m *AppStreamRequest) GetRequest() isAppStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AppStreamRequest) GetMetadata() *ManifestRequestMetadata {
	if x, ok := m.GetRequest().(*AppStreamRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *AppStreamRequest) GetFile() *File {
	if x, ok := m.GetRequest().(*AppStreamRequest_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AppStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AppStreamRequest_Metadata)(nil),
		(*AppStreamRequest_File)(nil),
	}
}

// ManifestRequestMetadata defines the metada related to the file being sent
// to the CMP server.
type ManifestRequestMetadata struct {
	// appName refers to the ArgoCD Application name
	AppName string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
	// appRelPath points to the application relative path inside the tarball
	AppRelPath string `protobuf:"bytes,2,opt,name=appRelPath,proto3" json:"appRelPath,omitempty"`
	// checksum is used to verify the integrity of the file
	Checksum string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// size relates to the file size in bytes
	Size_ int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// env is a list with the environment variables needed to generate manifests
	Env                  []*EnvEntry `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ManifestRequestMetadata) Reset()         { *m = ManifestRequestMetadata{} }
func (m *ManifestRequestMetadata) String() string { return proto.CompactTextString(m) }
func (*ManifestRequestMetadata) ProtoMessage()    {}
func (*ManifestRequestMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{1}
}
func (m *ManifestRequestMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestRequestMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestRequestMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestRequestMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestRequestMetadata.Merge(m, src)
}
func (m *ManifestRequestMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ManifestRequestMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestRequestMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestRequestMetadata proto.InternalMessageInfo

func (m *ManifestRequestMetadata) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ManifestRequestMetadata) GetAppRelPath() string {
	if m != nil {
		return m.AppRelPath
	}
	return ""
}

func (m *ManifestRequestMetadata) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ManifestRequestMetadata) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ManifestRequestMetadata) GetEnv() []*EnvEntry {
	if m != nil {
		return m.Env
	}
	return nil
}

// EnvEntry represents an entry in the application's environment
type EnvEntry struct {
	// Name is the name of the variable, usually expressed in uppercase
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value is the value of the variable
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvEntry) Reset()         { *m = EnvEntry{} }
func (m *EnvEntry) String() string { return proto.CompactTextString(m) }
func (*EnvEntry) ProtoMessage()    {}
func (*EnvEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{2}
}
func (m *EnvEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvEntry.Merge(m, src)
}
func (m *EnvEntry) XXX_Size() int {
	return m.Size()
}
func (m *EnvEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EnvEntry proto.InternalMessageInfo

func (m *EnvEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ManifestResponse struct {
	Manifests            []string `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty"`
	SourceType           string   `protobuf:"bytes,2,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManifestResponse) Reset()         { *m = ManifestResponse{} }
func (m *ManifestResponse) String() string { return proto.CompactTextString(m) }
func (*ManifestResponse) ProtoMessage()    {}
func (*ManifestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{3}
}
func (m *ManifestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestResponse.Merge(m, src)
}
func (m *ManifestResponse) XXX_Size() int {
	return m.Size()
}
func (m *ManifestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestResponse proto.InternalMessageInfo

func (m *ManifestResponse) GetManifests() []string {
	if m != nil {
		return m.Manifests
	}
	return nil
}

func (m *ManifestResponse) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

type RepositoryResponse struct {
	IsSupported          bool     `protobuf:"varint,1,opt,name=isSupported,proto3" json:"isSupported,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepositoryResponse) Reset()         { *m = RepositoryResponse{} }
func (m *RepositoryResponse) String() string { return proto.CompactTextString(m) }
func (*RepositoryResponse) ProtoMessage()    {}
func (*RepositoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{4}
}
func (m *RepositoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryResponse.Merge(m, src)
}
func (m *RepositoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryResponse proto.InternalMessageInfo

func (m *RepositoryResponse) GetIsSupported() bool {
	if m != nil {
		return m.IsSupported
	}
	return false
}

type ParameterAnnouncement struct {
	// name is the name identifying a parameter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// title is a human-readable text of the parameter name.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// tooltip is a human-readable description of the parameter.
	Tooltip string `protobuf:"bytes,3,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	// required defines if this given parameter is mandatory.
	Required bool `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// itemType determines the primitive data type represented by the parameter. Parameters are always encoded as
	// strings, but this field lets them be interpreted as other primitive types.
	ItemType string `protobuf:"bytes,5,opt,name=itemType,proto3" json:"itemType,omitempty"`
	// collectionType is the type of value this parameter holds - either a single value (a string) or a collection
	// (array or map). If collectionType is set, only the field with that type will be used. If collectionType is not
	// set, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.
	CollectionType string `protobuf:"bytes,6,opt,name=collectionType,proto3" json:"collectionType,omitempty"`
	// string is the default value of the parameter if the parameter is a string.
	String_ string `protobuf:"bytes,7,opt,name=string,proto3" json:"string,omitempty"`
	// array is the default value of the parameter if the parameter is an array.
	Array []string `protobuf:"bytes,8,rep,name=array,proto3" json:"array,omitempty"`
	// map is the default value of the parameter if the parameter is a map.
	Map                  map[string]string `protobuf:"bytes,9,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ParameterAnnouncement) Reset()         { *m = ParameterAnnouncement{} }
func (m *ParameterAnnouncement) String() string { return proto.CompactTextString(m) }
func (*ParameterAnnouncement) ProtoMessage()    {}
func (*ParameterAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{5}
}
func (m *ParameterAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParameterAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParameterAnnouncement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParameterAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParameterAnnouncement.Merge(m, src)
}
func (m *ParameterAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *ParameterAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_ParameterAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_ParameterAnnouncement proto.InternalMessageInfo

func (m *ParameterAnnouncement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterAnnouncement) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParameterAnnouncement) GetTooltip() string {
	if m != nil {
		return m.Tooltip
	}
	return ""
}

func (m *ParameterAnnouncement) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *ParameterAnnouncement) GetItemType() string {
	if m != nil {
		return m.ItemType
	}
	return ""
}

func (m *ParameterAnnouncement) GetCollectionType() string {
	if m != nil {
		return m.CollectionType
	}
	return ""
}

func (m *ParameterAnnouncement) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *ParameterAnnouncement) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *ParameterAnnouncement) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

// ParametersAnnouncementResponse contains a list of announcements. This list represents all the parameters which a CMP
// is able to accept.
type ParametersAnnouncementResponse struct {
	ParameterAnnouncements []*ParameterAnnouncement `protobuf:"bytes,1,rep,name=parameterAnnouncements,proto3" json:"parameterAnnouncements,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *ParametersAnnouncementResponse) Reset()         { *m = ParametersAnnouncementResponse{} }
func (m *ParametersAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*ParametersAnnouncementResponse) ProtoMessage()    {}
func (*ParametersAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{6}
}
func (m *ParametersAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParametersAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParametersAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParametersAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParametersAnnouncementResponse.Merge(m, src)
}
func (m *ParametersAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParametersAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParametersAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParametersAnnouncementResponse proto.InternalMessageInfo

func (m *ParametersAnnouncementResponse) GetParameterAnnouncements() []*ParameterAnnouncement {
	if m != nil {
		return m.ParameterAnnouncements
	}
	return nil
}

type File struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21875a7079a06ed, []int{7}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*AppStreamRequest)(nil), "plugin.AppStreamRequest")
	proto.RegisterType((*ManifestRequestMetadata)(nil), "plugin.ManifestRequestMetadata")
	proto.RegisterType((*EnvEntry)(nil), "plugin.EnvEntry")
	proto.RegisterType((*ManifestResponse)(nil), "plugin.ManifestResponse")
	proto.RegisterType((*RepositoryResponse)(nil), "plugin.RepositoryResponse")
	proto.RegisterType((*ParameterAnnouncement)(nil), "plugin.ParameterAnnouncement")
	proto.RegisterMapType((map[string]string)(nil), "plugin.ParameterAnnouncement.MapEntry")
	proto.RegisterType((*ParametersAnnouncementResponse)(nil), "plugin.ParametersAnnouncementResponse")
	proto.RegisterType((*File)(nil), "plugin.File")
}

func init() { proto.RegisterFile("cmpserver/plugin/plugin.proto", fileDescriptor_b21875a7079a06ed) }

var fileDescriptor_b21875a7079a06ed = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0xee, 0x26, 0x69, 0xba, 0x99, 0x54, 0xbf, 0x5f, 0x64, 0x41, 0x59, 0xa2, 0x36, 0x44, 0x7b,
	0xa8, 0x72, 0x21, 0x91, 0x02, 0xaa, 0x2a, 0x24, 0x24, 0x5a, 0x54, 0x5a, 0x81, 0x82, 0x22, 0x17,
	0x2e, 0xdc, 0xdc, 0xcd, 0x34, 0x31, 0xdd, 0xb5, 0x8d, 0xd7, 0x1b, 0x14, 0x4e, 0xbc, 0x07, 0x0f,
	0xc0, 0xab, 0x70, 0xe4, 0xce, 0x05, 0xf5, 0x49, 0xd0, 0x7a, 0xff, 0x24, 0x6a, 0xd3, 0x9e, 0xd6,
	0xdf, 0x8c, 0xe7, 0xf3, 0x37, 0xf3, 0x79, 0x0d, 0x7b, 0x41, 0xa4, 0x62, 0xd4, 0x73, 0xd4, 0x03,
	0x15, 0x26, 0x53, 0x2e, 0xf2, 0x4f, 0x5f, 0x69, 0x69, 0x24, 0xa9, 0x67, 0xc8, 0xff, 0xee, 0x40,
	0xeb, 0x48, 0xa9, 0x73, 0xa3, 0x91, 0x45, 0x14, 0xbf, 0x24, 0x18, 0x1b, 0xf2, 0x12, 0xdc, 0x08,
	0x0d, 0x9b, 0x30, 0xc3, 0x3c, 0xa7, 0xeb, 0xf4, 0x9a, 0xc3, 0x27, 0xfd, 0xbc, 0x7a, 0xc4, 0x04,
	0xbf, 0xc4, 0xd8, 0xe4, 0x5b, 0x47, 0xf9, 0xb6, 0xb3, 0x0d, 0x5a, 0x96, 0x10, 0x1f, 0x6a, 0x97,
	0x3c, 0x44, 0xaf, 0x62, 0x4b, 0xb7, 0x8b, 0xd2, 0x37, 0x3c, 0xc4, 0xb3, 0x0d, 0x6a, 0x73, 0xc7,
	0x0d, 0xd8, 0xd2, 0x19, 0x85, 0xff, 0xd3, 0x81, 0x47, 0x77, 0xd0, 0x12, 0x0f, 0xb6, 0x98, 0x52,
	0xef, 0x59, 0x84, 0x56, 0x48, 0x83, 0x16, 0x90, 0x74, 0x00, 0x98, 0x52, 0x14, 0xc3, 0x31, 0x33,
	0x33, 0x7b, 0x54, 0x83, 0xae, 0x44, 0x48, 0x1b, 0xdc, 0x60, 0x86, 0xc1, 0x55, 0x9c, 0x44, 0x5e,
	0xd5, 0x66, 0x4b, 0x4c, 0x08, 0xd4, 0x62, 0xfe, 0x0d, 0xbd, 0x5a, 0xd7, 0xe9, 0x55, 0xa9, 0x5d,
	0x13, 0x1f, 0xaa, 0x28, 0xe6, 0xde, 0x66, 0xb7, 0xda, 0x6b, 0x0e, 0x5b, 0x85, 0xe6, 0x13, 0x31,
	0x3f, 0x11, 0x46, 0x2f, 0x68, 0x9a, 0xf4, 0x9f, 0x83, 0x5b, 0x04, 0x52, 0x0e, 0xb1, 0x94, 0x65,
	0xd7, 0xe4, 0x01, 0x6c, 0xce, 0x59, 0x98, 0x60, 0x2e, 0x27, 0x03, 0xfe, 0x18, 0x5a, 0xcb, 0xf6,
	0x62, 0x25, 0x45, 0x8c, 0x64, 0x17, 0x1a, 0x51, 0x1e, 0x8b, 0x3d, 0xa7, 0x5b, 0xed, 0x35, 0xe8,
	0x32, 0x90, 0xf6, 0x16, 0xcb, 0x44, 0x07, 0xf8, 0x61, 0xa1, 0x0a, 0xb2, 0x95, 0x88, 0x7f, 0x00,
	0x84, 0xa2, 0x92, 0x31, 0x37, 0x52, 0x2f, 0x4a, 0xce, 0x2e, 0x34, 0x79, 0x7c, 0x9e, 0x28, 0x25,
	0xb5, 0xc1, 0x89, 0x15, 0xe6, 0xd2, 0xd5, 0x90, 0xff, 0xa7, 0x02, 0x0f, 0xc7, 0x4c, 0xb3, 0x08,
	0x0d, 0xea, 0x23, 0x21, 0x64, 0x22, 0x02, 0x8c, 0x50, 0x98, 0xbb, 0xba, 0x31, 0xdc, 0x84, 0x65,
	0x37, 0x16, 0xa4, 0x8e, 0x18, 0x29, 0x43, 0xc3, 0x55, 0x3e, 0xd6, 0x02, 0xa6, 0x13, 0x4f, 0x2d,
	0xe5, 0x1a, 0x27, 0x76, 0xb2, 0x2e, 0x2d, 0x71, 0x9a, 0xe3, 0x06, 0x23, 0xdb, 0xcf, 0x66, 0xe6,
	0x46, 0x81, 0xc9, 0x3e, 0xfc, 0x17, 0xc8, 0x30, 0xc4, 0xc0, 0x70, 0x29, 0xec, 0x8e, 0xba, 0xdd,
	0x71, 0x23, 0x4a, 0x76, 0xa0, 0x1e, 0x1b, 0xcd, 0xc5, 0xd4, 0xdb, 0xb2, 0xf9, 0x1c, 0xa5, 0x3a,
	0x99, 0xd6, 0x6c, 0xe1, 0xb9, 0x76, 0x8e, 0x19, 0x20, 0x87, 0x50, 0x8d, 0x98, 0xf2, 0x1a, 0xd6,
	0xcf, 0xfd, 0xc2, 0xcf, 0xb5, 0xdd, 0xf7, 0x47, 0x4c, 0xe5, 0x2e, 0x47, 0x4c, 0xb5, 0x0f, 0xc0,
	0x2d, 0x02, 0xa4, 0x05, 0xd5, 0x2b, 0x5c, 0xe4, 0x63, 0x49, 0x97, 0xeb, 0x3d, 0x7e, 0x51, 0x39,
	0x74, 0xfc, 0xaf, 0xd0, 0x29, 0xe9, 0xe3, 0x55, 0xfe, 0xd2, 0xa1, 0x8f, 0xb0, 0xa3, 0xd6, 0x09,
	0xc8, 0xae, 0x40, 0x73, 0xb8, 0x77, 0xaf, 0x4c, 0x7a, 0x47, 0xb1, 0xbf, 0x0b, 0xb5, 0xf4, 0xdf,
	0x4a, 0xa5, 0x05, 0xb3, 0x44, 0x5c, 0x59, 0xb9, 0xdb, 0x34, 0x03, 0xc3, 0x1f, 0x15, 0xd8, 0x7b,
	0x2d, 0xc5, 0x25, 0x9f, 0x8e, 0x98, 0x60, 0x53, 0x5b, 0x33, 0xb6, 0xc7, 0x9c, 0xa3, 0x9e, 0xf3,
	0x00, 0xc9, 0x5b, 0x68, 0x9d, 0xa2, 0x40, 0xcd, 0x0c, 0x16, 0x17, 0x95, 0x78, 0x85, 0x94, 0x9b,
	0x8f, 0x43, 0xdb, 0xbb, 0xfd, 0x14, 0x64, 0xed, 0xf9, 0x1b, 0x3d, 0x87, 0xbc, 0x83, 0xff, 0x47,
	0xcc, 0x04, 0xb3, 0xe5, 0xfd, 0xbc, 0x87, 0xaa, 0x5d, 0x64, 0x6e, 0xdf, 0x66, 0x4b, 0xc6, 0xe0,
	0xf1, 0x29, 0x9a, 0xf5, 0x43, 0xbd, 0x87, 0xf6, 0xb6, 0xdb, 0x6b, 0xed, 0x48, 0x8f, 0x38, 0x7e,
	0xf5, 0xeb, 0xba, 0xe3, 0xfc, 0xbe, 0xee, 0x38, 0x7f, 0xaf, 0x3b, 0xce, 0xa7, 0xe1, 0x94, 0x9b,
	0x59, 0x72, 0xd1, 0x0f, 0x64, 0x34, 0x60, 0x7a, 0x2a, 0x95, 0x96, 0x9f, 0xed, 0xe2, 0x69, 0x30,
	0x19, 0xcc, 0x87, 0x83, 0xe5, 0x9b, 0xca, 0x14, 0x0f, 0x42, 0x8e, 0xc2, 0x5c, 0xd4, 0xed, 0x83,
	0xfa, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xf3, 0x00, 0x14, 0x71, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigManagementPluginServiceClient is the client API for ConfigManagementPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigManagementPluginServiceClient interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GenerateManifestClient, error)
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_MatchRepositoryClient, error)
	// GetParametersAnnouncement gets a list of parameter announcements for the given app
	GetParametersAnnouncement(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GetParametersAnnouncementClient, error)
}

type configManagementPluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigManagementPluginServiceClient(cc *grpc.ClientConn) ConfigManagementPluginServiceClient {
	return &configManagementPluginServiceClient{cc}
}

func (c *configManagementPluginServiceClient) GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GenerateManifestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigManagementPluginService_serviceDesc.Streams[0], "/plugin.ConfigManagementPluginService/GenerateManifest", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementPluginServiceGenerateManifestClient{stream}
	return x, nil
}

type ConfigManagementPluginService_GenerateManifestClient interface {
	Send(*AppStreamRequest) error
	CloseAndRecv() (*ManifestResponse, error)
	grpc.ClientStream
}

type configManagementPluginServiceGenerateManifestClient struct {
	grpc.ClientStream
}

func (x *configManagementPluginServiceGenerateManifestClient) Send(m *AppStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configManagementPluginServiceGenerateManifestClient) CloseAndRecv() (*ManifestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ManifestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementPluginServiceClient) MatchRepository(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_MatchRepositoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigManagementPluginService_serviceDesc.Streams[1], "/plugin.ConfigManagementPluginService/MatchRepository", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementPluginServiceMatchRepositoryClient{stream}
	return x, nil
}

type ConfigManagementPluginService_MatchRepositoryClient interface {
	Send(*AppStreamRequest) error
	CloseAndRecv() (*RepositoryResponse, error)
	grpc.ClientStream
}

type configManagementPluginServiceMatchRepositoryClient struct {
	grpc.ClientStream
}

func (x *configManagementPluginServiceMatchRepositoryClient) Send(m *AppStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configManagementPluginServiceMatchRepositoryClient) CloseAndRecv() (*RepositoryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RepositoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementPluginServiceClient) GetParametersAnnouncement(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GetParametersAnnouncementClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigManagementPluginService_serviceDesc.Streams[2], "/plugin.ConfigManagementPluginService/GetParametersAnnouncement", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementPluginServiceGetParametersAnnouncementClient{stream}
	return x, nil
}

type ConfigManagementPluginService_GetParametersAnnouncementClient interface {
	Send(*AppStreamRequest) error
	CloseAndRecv() (*ParametersAnnouncementResponse, error)
	grpc.ClientStream
}

type configManagementPluginServiceGetParametersAnnouncementClient struct {
	grpc.ClientStream
}

func (x *configManagementPluginServiceGetParametersAnnouncementClient) Send(m *AppStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configManagementPluginServiceGetParametersAnnouncementClient) CloseAndRecv() (*ParametersAnnouncementResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ParametersAnnouncementResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigManagementPluginServiceServer is the server API for ConfigManagementPluginService service.
type ConfigManagementPluginServiceServer interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(ConfigManagementPluginService_GenerateManifestServer) error
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(ConfigManagementPluginService_MatchRepositoryServer) error
	// GetParametersAnnouncement gets a list of parameter announcements for the given app
	GetParametersAnnouncement(ConfigManagementPluginService_GetParametersAnnouncementServer) error
}

// UnimplementedConfigManagementPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConfigManagementPluginServiceServer struct {
}

func (*UnimplementedConfigManagementPluginServiceServer) GenerateManifest(srv ConfigManagementPluginService_GenerateManifestServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateManifest not implemented")
}
func (*UnimplementedConfigManagementPluginServiceServer) MatchRepository(srv ConfigManagementPluginService_MatchRepositoryServer) error {
	return status.Errorf(codes.Unimplemented, "method MatchRepository not implemented")
}
func (*UnimplementedConfigManagementPluginServiceServer) GetParametersAnnouncement(srv ConfigManagementPluginService_GetParametersAnnouncementServer) error {
	return status.Errorf(codes.Unimplemented, "method GetParametersAnnouncement not implemented")
}

func RegisterConfigManagementPluginServiceServer(s *grpc.Server, srv ConfigManagementPluginServiceServer) {
	s.RegisterService(&_ConfigManagementPluginService_serviceDesc, srv)
}

func _ConfigManagementPluginService_GenerateManifest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).GenerateManifest(&configManagementPluginServiceGenerateManifestServer{stream})
}

type ConfigManagementPluginService_GenerateManifestServer interface {
	SendAndClose(*ManifestResponse) error
	Recv() (*AppStreamRequest, error)
	grpc.ServerStream
}

type configManagementPluginServiceGenerateManifestServer struct {
	grpc.ServerStream
}

func (x *configManagementPluginServiceGenerateManifestServer) SendAndClose(m *ManifestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configManagementPluginServiceGenerateManifestServer) Recv() (*AppStreamRequest, error) {
	m := new(AppStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConfigManagementPluginService_MatchRepository_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).MatchRepository(&configManagementPluginServiceMatchRepositoryServer{stream})
}

type ConfigManagementPluginService_MatchRepositoryServer interface {
	SendAndClose(*RepositoryResponse) error
	Recv() (*AppStreamRequest, error)
	grpc.ServerStream
}

type configManagementPluginServiceMatchRepositoryServer struct {
	grpc.ServerStream
}

func (x *configManagementPluginServiceMatchRepositoryServer) SendAndClose(m *RepositoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configManagementPluginServiceMatchRepositoryServer) Recv() (*AppStreamRequest, error) {
	m := new(AppStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConfigManagementPluginService_GetParametersAnnouncement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).GetParametersAnnouncement(&configManagementPluginServiceGetParametersAnnouncementServer{stream})
}

type ConfigManagementPluginService_GetParametersAnnouncementServer interface {
	SendAndClose(*ParametersAnnouncementResponse) error
	Recv() (*AppStreamRequest, error)
	grpc.ServerStream
}

type configManagementPluginServiceGetParametersAnnouncementServer struct {
	grpc.ServerStream
}

func (x *configManagementPluginServiceGetParametersAnnouncementServer) SendAndClose(m *ParametersAnnouncementResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configManagementPluginServiceGetParametersAnnouncementServer) Recv() (*AppStreamRequest, error) {
	m := new(AppStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConfigManagementPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.ConfigManagementPluginService",
	HandlerType: (*ConfigManagementPluginServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateManifest",
			Handler:       _ConfigManagementPluginService_GenerateManifest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MatchRepository",
			Handler:       _ConfigManagementPluginService_MatchRepository_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetParametersAnnouncement",
			Handler:       _ConfigManagementPluginService_GetParametersAnnouncement_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmpserver/plugin/plugin.proto",
}

func (m *AppStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppStreamRequest_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppStreamRequest_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AppStreamRequest_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppStreamRequest_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ManifestRequestMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestRequestMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestRequestMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Env) > 0 {
		for iNdEx := len(m.Env) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Env[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppRelPath) > 0 {
		i -= len(m.AppRelPath)
		copy(dAtA[i:], m.AppRelPath)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.AppRelPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManifestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manifests) > 0 {
		for iNdEx := len(m.Manifests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Manifests[iNdEx])
			copy(dAtA[i:], m.Manifests[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.Manifests[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSupported {
		i--
		if m.IsSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParameterAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParameterAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParameterAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPlugin(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPlugin(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPlugin(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Array) > 0 {
		for iNdEx := len(m.Array) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Array[iNdEx])
			copy(dAtA[i:], m.Array[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.Array[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.String_) > 0 {
		i -= len(m.String_)
		copy(dAtA[i:], m.String_)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.String_)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CollectionType) > 0 {
		i -= len(m.CollectionType)
		copy(dAtA[i:], m.CollectionType)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.CollectionType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ItemType) > 0 {
		i -= len(m.ItemType)
		copy(dAtA[i:], m.ItemType)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ItemType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Tooltip) > 0 {
		i -= len(m.Tooltip)
		copy(dAtA[i:], m.Tooltip)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Tooltip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParametersAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParametersAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParametersAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParameterAnnouncements) > 0 {
		for iNdEx := len(m.ParameterAnnouncements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParameterAnnouncements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppStreamRequest_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}
func (m *AppStreamRequest_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}
func (m *ManifestRequestMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.AppRelPath)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovPlugin(uint64(m.Size_))
	}
	if len(m.Env) > 0 {
		for _, e := range m.Env {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManifestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, s := range m.Manifests {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepositoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSupported {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParameterAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Tooltip)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Required {
		n += 2
	}
	l = len(m.ItemType)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.CollectionType)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if len(m.Array) > 0 {
		for _, s := range m.Array {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPlugin(uint64(len(k))) + 1 + len(v) + sovPlugin(uint64(len(v)))
			n += mapEntrySize + 1 + sovPlugin(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParametersAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParameterAnnouncements) > 0 {
		for _, e := range m.ParameterAnnouncements {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlugin(x uint64) (n int) {
	return sovPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManifestRequestMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AppStreamRequest_Metadata{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &File{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AppStreamRequest_File{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestRequestMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestRequestMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestRequestMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRelPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppRelPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, &EnvEntry{})
			if err := m.Env[len(m.Env)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParameterAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tooltip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tooltip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Array = append(m.Array, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPlugin
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPlugin
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPlugin
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPlugin
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlugin(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlugin
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParametersAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParametersAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParametersAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterAnnouncements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParameterAnnouncements = append(m.ParameterAnnouncements, &ParameterAnnouncement{})
			if err := m.ParameterAnnouncements[len(m.ParameterAnnouncements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlugin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlugin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlugin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlugin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlugin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlugin = fmt.Errorf("proto: unexpected end of group")
)
