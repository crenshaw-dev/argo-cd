// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/applicationset/applicationset.proto

// ApplicationSet Service
//
// ApplicationSet Service API performs CRUD actions against applicationset resources

package applicationset

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/applicationset/v1alpha1"
	apiclient "github.com/argoproj/argo-cd/v2/reposerver/apiclient"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	_ "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApplicationSetQuery is a query for applicationset resources
type ApplicationSetQuery struct {
	// the applicationsets's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// forces applicationset reconciliation if set to true
	Refresh string `protobuf:"bytes,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// the project names to restrict returned list applicationsets
	Projects []string `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty"`
	// when specified with a watch call, shows changes that occur after that particular version of a resource.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// the selector to restrict returned list to applications only with matched labels
	Selector string `protobuf:"bytes,5,opt,name=selector,proto3" json:"selector,omitempty"`
	// the repoURL to restrict returned list applications
	Repo                 string   `protobuf:"bytes,6,opt,name=repo,proto3" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetQuery) Reset()         { *m = ApplicationSetQuery{} }
func (m *ApplicationSetQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetQuery) ProtoMessage()    {}
func (*ApplicationSetQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{0}
}
func (m *ApplicationSetQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetQuery.Merge(m, src)
}
func (m *ApplicationSetQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetQuery proto.InternalMessageInfo

func (m *ApplicationSetQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetQuery) GetRefresh() string {
	if m != nil {
		return m.Refresh
	}
	return ""
}

func (m *ApplicationSetQuery) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ApplicationSetQuery) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ApplicationSetQuery) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ApplicationSetQuery) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

type NodeQuery struct {
	// the applicationset's name
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeQuery) Reset()         { *m = NodeQuery{} }
func (m *NodeQuery) String() string { return proto.CompactTextString(m) }
func (*NodeQuery) ProtoMessage()    {}
func (*NodeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{1}
}
func (m *NodeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeQuery.Merge(m, src)
}
func (m *NodeQuery) XXX_Size() int {
	return m.Size()
}
func (m *NodeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NodeQuery proto.InternalMessageInfo

func (m *NodeQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ApplicationSetRevisionMetadataQuery struct {
	// the applicationset's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the revision of the applicationset
	Revision             string   `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetRevisionMetadataQuery) Reset()         { *m = ApplicationSetRevisionMetadataQuery{} }
func (m *ApplicationSetRevisionMetadataQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetRevisionMetadataQuery) ProtoMessage()    {}
func (*ApplicationSetRevisionMetadataQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{2}
}
func (m *ApplicationSetRevisionMetadataQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetRevisionMetadataQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetRevisionMetadataQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetRevisionMetadataQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetRevisionMetadataQuery.Merge(m, src)
}
func (m *ApplicationSetRevisionMetadataQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetRevisionMetadataQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetRevisionMetadataQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetRevisionMetadataQuery proto.InternalMessageInfo

func (m *ApplicationSetRevisionMetadataQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetRevisionMetadataQuery) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

// ManifestQuery is a query for manifest resources
type ApplicationSetManifestQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Revision             string   `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetManifestQuery) Reset()         { *m = ApplicationSetManifestQuery{} }
func (m *ApplicationSetManifestQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetManifestQuery) ProtoMessage()    {}
func (*ApplicationSetManifestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{3}
}
func (m *ApplicationSetManifestQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetManifestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetManifestQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetManifestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetManifestQuery.Merge(m, src)
}
func (m *ApplicationSetManifestQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetManifestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetManifestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetManifestQuery proto.InternalMessageInfo

func (m *ApplicationSetManifestQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetManifestQuery) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type ApplicationSetResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResponse) Reset()         { *m = ApplicationSetResponse{} }
func (m *ApplicationSetResponse) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResponse) ProtoMessage()    {}
func (*ApplicationSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{4}
}
func (m *ApplicationSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResponse.Merge(m, src)
}
func (m *ApplicationSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResponse proto.InternalMessageInfo

type ApplicationSetCreateRequest struct {
	Applicationset       *v1alpha1.ApplicationSet `protobuf:"bytes,1,opt,name=applicationset,proto3" json:"applicationset,omitempty"`
	Upsert               bool                     `protobuf:"varint,2,opt,name=upsert,proto3" json:"upsert,omitempty"`
	Validate             bool                     `protobuf:"varint,3,opt,name=validate,proto3" json:"validate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ApplicationSetCreateRequest) Reset()         { *m = ApplicationSetCreateRequest{} }
func (m *ApplicationSetCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetCreateRequest) ProtoMessage()    {}
func (*ApplicationSetCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{5}
}
func (m *ApplicationSetCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetCreateRequest.Merge(m, src)
}
func (m *ApplicationSetCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetCreateRequest proto.InternalMessageInfo

func (m *ApplicationSetCreateRequest) GetApplicationset() *v1alpha1.ApplicationSet {
	if m != nil {
		return m.Applicationset
	}
	return nil
}

func (m *ApplicationSetCreateRequest) GetUpsert() bool {
	if m != nil {
		return m.Upsert
	}
	return false
}

func (m *ApplicationSetCreateRequest) GetValidate() bool {
	if m != nil {
		return m.Validate
	}
	return false
}

type ApplicationSetUpdateRequest struct {
	Applicationset       *v1alpha1.ApplicationSet `protobuf:"bytes,1,opt,name=applicationset,proto3" json:"applicationset,omitempty"`
	Validate             bool                     `protobuf:"varint,2,opt,name=validate,proto3" json:"validate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ApplicationSetUpdateRequest) Reset()         { *m = ApplicationSetUpdateRequest{} }
func (m *ApplicationSetUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetUpdateRequest) ProtoMessage()    {}
func (*ApplicationSetUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{6}
}
func (m *ApplicationSetUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetUpdateRequest.Merge(m, src)
}
func (m *ApplicationSetUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetUpdateRequest proto.InternalMessageInfo

func (m *ApplicationSetUpdateRequest) GetApplicationset() *v1alpha1.ApplicationSet {
	if m != nil {
		return m.Applicationset
	}
	return nil
}

func (m *ApplicationSetUpdateRequest) GetValidate() bool {
	if m != nil {
		return m.Validate
	}
	return false
}

type ApplicationSetDeleteRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cascade              bool     `protobuf:"varint,2,opt,name=cascade,proto3" json:"cascade,omitempty"`
	PropagationPolicy    string   `protobuf:"bytes,3,opt,name=propagationPolicy,proto3" json:"propagationPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetDeleteRequest) Reset()         { *m = ApplicationSetDeleteRequest{} }
func (m *ApplicationSetDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetDeleteRequest) ProtoMessage()    {}
func (*ApplicationSetDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{7}
}
func (m *ApplicationSetDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetDeleteRequest.Merge(m, src)
}
func (m *ApplicationSetDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetDeleteRequest proto.InternalMessageInfo

func (m *ApplicationSetDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetDeleteRequest) GetCascade() bool {
	if m != nil {
		return m.Cascade
	}
	return false
}

func (m *ApplicationSetDeleteRequest) GetPropagationPolicy() string {
	if m != nil {
		return m.PropagationPolicy
	}
	return ""
}

// ApplicationSetUpdateSpecRequest is a request to update applicationset spec
type ApplicationSetUpdateSpecRequest struct {
	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Spec                 *v1alpha1.ApplicationSetSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Validate             bool                         `protobuf:"varint,3,opt,name=validate,proto3" json:"validate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ApplicationSetUpdateSpecRequest) Reset()         { *m = ApplicationSetUpdateSpecRequest{} }
func (m *ApplicationSetUpdateSpecRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetUpdateSpecRequest) ProtoMessage()    {}
func (*ApplicationSetUpdateSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{8}
}
func (m *ApplicationSetUpdateSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetUpdateSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetUpdateSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetUpdateSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetUpdateSpecRequest.Merge(m, src)
}
func (m *ApplicationSetUpdateSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetUpdateSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetUpdateSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetUpdateSpecRequest proto.InternalMessageInfo

func (m *ApplicationSetUpdateSpecRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetUpdateSpecRequest) GetSpec() *v1alpha1.ApplicationSetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ApplicationSetUpdateSpecRequest) GetValidate() bool {
	if m != nil {
		return m.Validate
	}
	return false
}

// ApplicationSetPatchRequest is a request to patch an applicationset
type ApplicationSetPatchRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Patch                string   `protobuf:"bytes,2,opt,name=patch,proto3" json:"patch,omitempty"`
	PatchType            string   `protobuf:"bytes,3,opt,name=patchType,proto3" json:"patchType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetPatchRequest) Reset()         { *m = ApplicationSetPatchRequest{} }
func (m *ApplicationSetPatchRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetPatchRequest) ProtoMessage()    {}
func (*ApplicationSetPatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{9}
}
func (m *ApplicationSetPatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetPatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetPatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetPatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetPatchRequest.Merge(m, src)
}
func (m *ApplicationSetPatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetPatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetPatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetPatchRequest proto.InternalMessageInfo

func (m *ApplicationSetPatchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetPatchRequest) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

func (m *ApplicationSetPatchRequest) GetPatchType() string {
	if m != nil {
		return m.PatchType
	}
	return ""
}

type ApplicationSetRollbackRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	DryRun               bool     `protobuf:"varint,3,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
	Prune                bool     `protobuf:"varint,4,opt,name=prune,proto3" json:"prune,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetRollbackRequest) Reset()         { *m = ApplicationSetRollbackRequest{} }
func (m *ApplicationSetRollbackRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetRollbackRequest) ProtoMessage()    {}
func (*ApplicationSetRollbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{10}
}
func (m *ApplicationSetRollbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetRollbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetRollbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetRollbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetRollbackRequest.Merge(m, src)
}
func (m *ApplicationSetRollbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetRollbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetRollbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetRollbackRequest proto.InternalMessageInfo

func (m *ApplicationSetRollbackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetRollbackRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ApplicationSetRollbackRequest) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *ApplicationSetRollbackRequest) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

type ApplicationSetResourceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName         string   `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Kind                 string   `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourceRequest) Reset()         { *m = ApplicationSetResourceRequest{} }
func (m *ApplicationSetResourceRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourceRequest) ProtoMessage()    {}
func (*ApplicationSetResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{11}
}
func (m *ApplicationSetResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourceRequest.Merge(m, src)
}
func (m *ApplicationSetResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourceRequest proto.InternalMessageInfo

func (m *ApplicationSetResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationSetResourceRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ApplicationSetResourceRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationSetResourceRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ApplicationSetResourceRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type ApplicationSetResourcePatchRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName         string   `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Kind                 string   `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Patch                string   `protobuf:"bytes,7,opt,name=patch,proto3" json:"patch,omitempty"`
	PatchType            string   `protobuf:"bytes,8,opt,name=patchType,proto3" json:"patchType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourcePatchRequest) Reset()         { *m = ApplicationSetResourcePatchRequest{} }
func (m *ApplicationSetResourcePatchRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourcePatchRequest) ProtoMessage()    {}
func (*ApplicationSetResourcePatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{12}
}
func (m *ApplicationSetResourcePatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourcePatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourcePatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourcePatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourcePatchRequest.Merge(m, src)
}
func (m *ApplicationSetResourcePatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourcePatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourcePatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourcePatchRequest proto.InternalMessageInfo

func (m *ApplicationSetResourcePatchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

func (m *ApplicationSetResourcePatchRequest) GetPatchType() string {
	if m != nil {
		return m.PatchType
	}
	return ""
}

type ApplicationSetResourceDeleteRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName         string   `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Kind                 string   `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Force                bool     `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	Orphan               bool     `protobuf:"varint,8,opt,name=orphan,proto3" json:"orphan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourceDeleteRequest) Reset()         { *m = ApplicationSetResourceDeleteRequest{} }
func (m *ApplicationSetResourceDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourceDeleteRequest) ProtoMessage()    {}
func (*ApplicationSetResourceDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{13}
}
func (m *ApplicationSetResourceDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourceDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourceDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourceDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourceDeleteRequest.Merge(m, src)
}
func (m *ApplicationSetResourceDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourceDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourceDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourceDeleteRequest proto.InternalMessageInfo

func (m *ApplicationSetResourceDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ApplicationSetResourceDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ApplicationSetResourceDeleteRequest) GetOrphan() bool {
	if m != nil {
		return m.Orphan
	}
	return false
}

type ApplicationSetResourceActionRunRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName         string   `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Kind                 string   `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Action               string   `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourceActionRunRequest) Reset() {
	*m = ApplicationSetResourceActionRunRequest{}
}
func (m *ApplicationSetResourceActionRunRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourceActionRunRequest) ProtoMessage()    {}
func (*ApplicationSetResourceActionRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{14}
}
func (m *ApplicationSetResourceActionRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourceActionRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourceActionRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourceActionRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourceActionRunRequest.Merge(m, src)
}
func (m *ApplicationSetResourceActionRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourceActionRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourceActionRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourceActionRunRequest proto.InternalMessageInfo

func (m *ApplicationSetResourceActionRunRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ApplicationSetResourceActionRunRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type ApplicationSetResourceResponse struct {
	Manifest             string   `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourceResponse) Reset()         { *m = ApplicationSetResourceResponse{} }
func (m *ApplicationSetResourceResponse) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourceResponse) ProtoMessage()    {}
func (*ApplicationSetResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{15}
}
func (m *ApplicationSetResourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourceResponse.Merge(m, src)
}
func (m *ApplicationSetResourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourceResponse proto.InternalMessageInfo

func (m *ApplicationSetResourceResponse) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

type ApplicationSetResourcesQuery struct {
	ApplicationsetName   string   `protobuf:"bytes,1,opt,name=applicationsetName,proto3" json:"applicationsetName,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Kind                 string   `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourcesQuery) Reset()         { *m = ApplicationSetResourcesQuery{} }
func (m *ApplicationSetResourcesQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourcesQuery) ProtoMessage()    {}
func (*ApplicationSetResourcesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{16}
}
func (m *ApplicationSetResourcesQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourcesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourcesQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourcesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourcesQuery.Merge(m, src)
}
func (m *ApplicationSetResourcesQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourcesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourcesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourcesQuery proto.InternalMessageInfo

func (m *ApplicationSetResourcesQuery) GetApplicationsetName() string {
	if m != nil {
		return m.ApplicationsetName
	}
	return ""
}

func (m *ApplicationSetResourcesQuery) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationSetResourcesQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourcesQuery) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationSetResourcesQuery) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ApplicationSetResourcesQuery) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func init() {
	proto.RegisterType((*ApplicationSetQuery)(nil), "applicationset.ApplicationSetQuery")
	proto.RegisterType((*NodeQuery)(nil), "applicationset.NodeQuery")
	proto.RegisterType((*ApplicationSetRevisionMetadataQuery)(nil), "applicationset.ApplicationSetRevisionMetadataQuery")
	proto.RegisterType((*ApplicationSetManifestQuery)(nil), "applicationset.ApplicationSetManifestQuery")
	proto.RegisterType((*ApplicationSetResponse)(nil), "applicationset.ApplicationSetResponse")
	proto.RegisterType((*ApplicationSetCreateRequest)(nil), "applicationset.ApplicationSetCreateRequest")
	proto.RegisterType((*ApplicationSetUpdateRequest)(nil), "applicationset.ApplicationSetUpdateRequest")
	proto.RegisterType((*ApplicationSetDeleteRequest)(nil), "applicationset.ApplicationSetDeleteRequest")
	proto.RegisterType((*ApplicationSetUpdateSpecRequest)(nil), "applicationset.ApplicationSetUpdateSpecRequest")
	proto.RegisterType((*ApplicationSetPatchRequest)(nil), "applicationset.ApplicationSetPatchRequest")
	proto.RegisterType((*ApplicationSetRollbackRequest)(nil), "applicationset.ApplicationSetRollbackRequest")
	proto.RegisterType((*ApplicationSetResourceRequest)(nil), "applicationset.ApplicationSetResourceRequest")
	proto.RegisterType((*ApplicationSetResourcePatchRequest)(nil), "applicationset.ApplicationSetResourcePatchRequest")
	proto.RegisterType((*ApplicationSetResourceDeleteRequest)(nil), "applicationset.ApplicationSetResourceDeleteRequest")
	proto.RegisterType((*ApplicationSetResourceActionRunRequest)(nil), "applicationset.ApplicationSetResourceActionRunRequest")
	proto.RegisterType((*ApplicationSetResourceResponse)(nil), "applicationset.ApplicationSetResourceResponse")
	proto.RegisterType((*ApplicationSetResourcesQuery)(nil), "applicationset.ApplicationSetResourcesQuery")
}

func init() {
	proto.RegisterFile("server/applicationset/applicationset.proto", fileDescriptor_eacb9df0ce5738fa)
}

var fileDescriptor_eacb9df0ce5738fa = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x6f, 0x23, 0x45,
	0x13, 0xce, 0xc4, 0x89, 0xd7, 0xae, 0xe4, 0xcd, 0xab, 0x6d, 0x20, 0xb2, 0x86, 0x6c, 0x76, 0x35,
	0x2b, 0xad, 0xa2, 0x85, 0x8c, 0xb5, 0x5e, 0x84, 0x90, 0xe0, 0xb2, 0x7c, 0x28, 0x20, 0x91, 0xec,
	0x32, 0x61, 0x39, 0xc0, 0x61, 0xd5, 0xe9, 0xa9, 0xd8, 0x43, 0x9c, 0xe9, 0xde, 0x9e, 0x1e, 0x83,
	0x0f, 0x5c, 0x38, 0x20, 0x0e, 0x1c, 0xf9, 0x25, 0xdc, 0xe0, 0xcc, 0x01, 0x71, 0xe2, 0xcc, 0x09,
	0xe5, 0xbe, 0x17, 0x7e, 0x01, 0xea, 0x9e, 0x1e, 0x8f, 0x67, 0xe2, 0xd8, 0x26, 0xc4, 0x52, 0x4e,
	0xee, 0xea, 0x8f, 0xaa, 0xe7, 0xa9, 0xae, 0xae, 0x2a, 0x0f, 0xdc, 0x4f, 0x50, 0x0e, 0x50, 0xb6,
	0xa9, 0x10, 0xfd, 0x88, 0x51, 0x15, 0xf1, 0x38, 0x41, 0x55, 0x11, 0x7d, 0x21, 0xb9, 0xe2, 0x64,
	0xa3, 0x3c, 0xeb, 0x6e, 0x75, 0x39, 0xef, 0xf6, 0xb1, 0x4d, 0x45, 0xd4, 0xa6, 0x71, 0xcc, 0x55,
	0xb6, 0x92, 0xed, 0x76, 0x1f, 0x77, 0x23, 0xd5, 0x4b, 0x8f, 0x7c, 0xc6, 0x4f, 0xdb, 0x54, 0x76,
	0xb9, 0x90, 0xfc, 0x4b, 0x33, 0xd8, 0x65, 0x61, 0x7b, 0xd0, 0x69, 0x8b, 0x93, 0xae, 0x3e, 0x99,
	0x54, 0x4d, 0x0f, 0x1e, 0xd0, 0xbe, 0xe8, 0xd1, 0x07, 0xed, 0x2e, 0xc6, 0x28, 0xa9, 0xc2, 0xd0,
	0x2a, 0xfc, 0x60, 0x86, 0x42, 0x89, 0x82, 0x5b, 0x36, 0x66, 0x18, 0x29, 0x2e, 0x87, 0x63, 0x43,
	0xab, 0xe6, 0xc3, 0x93, 0xb7, 0x12, 0x3f, 0xe2, 0xda, 0x36, 0x7e, 0xad, 0x30, 0x4e, 0xb4, 0xdd,
	0x5d, 0x8d, 0x24, 0x3b, 0x3b, 0x86, 0x6b, 0x6c, 0x43, 0x7b, 0x70, 0x1e, 0xd0, 0x1b, 0x85, 0xa6,
	0x53, 0xca, 0x7a, 0x51, 0x8c, 0x72, 0x58, 0x1c, 0x3f, 0x45, 0x45, 0x27, 0x9c, 0xf2, 0x7e, 0x76,
	0xe0, 0xa5, 0x47, 0x05, 0xe5, 0x43, 0x54, 0x9f, 0xa4, 0x28, 0x87, 0x84, 0xc0, 0x4a, 0x4c, 0x4f,
	0xb1, 0xe5, 0xdc, 0x71, 0x76, 0x9a, 0x81, 0x19, 0x93, 0x16, 0xdc, 0x90, 0x78, 0x2c, 0x31, 0xe9,
	0xb5, 0x96, 0xcd, 0x74, 0x2e, 0x12, 0x17, 0x1a, 0x9a, 0x3f, 0x32, 0x95, 0xb4, 0x6a, 0x77, 0x6a,
	0x3b, 0xcd, 0x60, 0x24, 0x93, 0x1d, 0xf8, 0xbf, 0xc4, 0x84, 0xa7, 0x92, 0xe1, 0x67, 0x28, 0x35,
	0xfc, 0xd6, 0x8a, 0x39, 0x5d, 0x9d, 0xd6, 0x5a, 0x12, 0xec, 0x23, 0x53, 0x5c, 0xb6, 0x56, 0xcd,
	0x96, 0x91, 0xac, 0xf1, 0x68, 0xdf, 0xb5, 0xea, 0x19, 0x1e, 0x3d, 0xf6, 0x6e, 0x43, 0xf3, 0x80,
	0x87, 0x78, 0x21, 0x60, 0xef, 0x29, 0xdc, 0x2d, 0x73, 0x0b, 0x70, 0x10, 0x69, 0x53, 0xfb, 0xa8,
	0x68, 0x48, 0x15, 0xbd, 0x98, 0xab, 0x0b, 0x0d, 0x69, 0x37, 0x5b, 0xb2, 0x23, 0xd9, 0xdb, 0x87,
	0x57, 0xcb, 0x6a, 0xf7, 0x69, 0x1c, 0x1d, 0x63, 0xa2, 0x2e, 0xa7, 0xae, 0x05, 0x9b, 0x55, 0x94,
	0x89, 0xd0, 0xd1, 0xe7, 0xfd, 0xee, 0x54, 0x2d, 0xbd, 0x27, 0x91, 0x2a, 0x0c, 0xf0, 0x79, 0x8a,
	0x89, 0x22, 0x5f, 0x41, 0xe5, 0x11, 0x18, 0x9b, 0x6b, 0x9d, 0xc7, 0x7e, 0x11, 0x9c, 0x7e, 0x1e,
	0x9c, 0x66, 0xf0, 0x8c, 0x85, 0xfe, 0xa0, 0xe3, 0x8b, 0x93, 0xae, 0xaf, 0xc3, 0xc2, 0xaf, 0xbc,
	0xac, 0x3c, 0xda, 0xfd, 0x0a, 0xa0, 0x8a, 0x19, 0xb2, 0x09, 0xf5, 0x54, 0x24, 0x28, 0x95, 0x21,
	0xd3, 0x08, 0xac, 0xa4, 0x69, 0x0e, 0x68, 0x3f, 0x0a, 0xa9, 0xc2, 0x56, 0xcd, 0xac, 0x8c, 0x64,
	0xef, 0xa7, 0x73, 0x64, 0x9e, 0x8a, 0xf0, 0x3a, 0x90, 0x19, 0x07, 0xbd, 0x5c, 0x01, 0x3d, 0xac,
	0x62, 0x7e, 0x1f, 0xfb, 0x58, 0x60, 0xbe, 0xe0, 0x95, 0x30, 0x9a, 0x30, 0x1a, 0xe6, 0xda, 0x72,
	0x91, 0xbc, 0x0e, 0x37, 0x85, 0xe4, 0x82, 0x76, 0x8d, 0xb2, 0x27, 0xbc, 0x1f, 0xb1, 0xa1, 0x71,
	0x53, 0x33, 0x38, 0xbf, 0xe0, 0xfd, 0xe2, 0xc0, 0xed, 0x49, 0xfe, 0x3a, 0x14, 0xc8, 0xa6, 0xd9,
	0xef, 0xc2, 0x4a, 0x22, 0x90, 0x19, 0xe3, 0x6b, 0x9d, 0xc3, 0x2b, 0xf6, 0x9e, 0xb1, 0x6e, 0x0c,
	0x4c, 0xbd, 0xec, 0x10, 0xdc, 0xf2, 0xb9, 0x27, 0x54, 0xb1, 0xde, 0x34, 0xd8, 0x2f, 0xc3, 0xaa,
	0xd0, 0x7b, 0xec, 0xf3, 0xc8, 0x04, 0xb2, 0x05, 0x4d, 0x33, 0xf8, 0x74, 0x28, 0xd0, 0xba, 0xaa,
	0x98, 0xf0, 0x9e, 0xc3, 0xad, 0xca, 0xdd, 0xf2, 0x7e, 0xff, 0x88, 0xb2, 0x93, 0x69, 0x86, 0x36,
	0x60, 0x39, 0x0a, 0x8d, 0x95, 0x5a, 0xb0, 0x1c, 0x85, 0x3a, 0x96, 0x43, 0x39, 0x0c, 0xd2, 0xd8,
	0x92, 0xb0, 0x92, 0x01, 0x24, 0xd3, 0x18, 0x4d, 0xb6, 0x6a, 0x04, 0x99, 0xa0, 0xf3, 0xe5, 0xad,
	0x73, 0xaf, 0xd5, 0x64, 0xb1, 0x69, 0x36, 0xb7, 0xa0, 0xa9, 0x7f, 0x13, 0x41, 0x19, 0x5a, 0x82,
	0xc5, 0x04, 0xf1, 0x60, 0x3d, 0x4f, 0x85, 0x07, 0xfa, 0x64, 0xc6, 0xb3, 0x34, 0xa7, 0xa3, 0x6a,
	0x50, 0xca, 0x9e, 0xb9, 0xa8, 0x71, 0x76, 0x25, 0x4f, 0x85, 0x4d, 0x99, 0x99, 0xa0, 0x51, 0x9c,
	0x44, 0x71, 0x98, 0xe7, 0x4b, 0x3d, 0xf6, 0xfe, 0x76, 0xc0, 0x9b, 0x8c, 0x7d, 0xe6, 0xed, 0x5c,
	0x0b, 0x02, 0x45, 0x8c, 0xdc, 0xb8, 0x30, 0x46, 0x1a, 0xd5, 0x18, 0x79, 0xe1, 0x9c, 0x2f, 0x02,
	0x19, 0xac, 0xd9, 0x4f, 0xf9, 0xda, 0xb0, 0x3e, 0xe6, 0x92, 0xa1, 0x61, 0xdd, 0x08, 0x32, 0x41,
	0x87, 0x2d, 0x97, 0xa2, 0x47, 0x63, 0x43, 0xb9, 0x11, 0x58, 0xc9, 0xfb, 0xd3, 0x81, 0x7b, 0x93,
	0xf9, 0x3e, 0x62, 0x7a, 0x22, 0x48, 0xe3, 0xeb, 0x4f, 0x79, 0x13, 0xea, 0xd4, 0xa0, 0xb5, 0x37,
	0x6d, 0x25, 0xef, 0x1d, 0xd8, 0xbe, 0xe8, 0xf1, 0x65, 0x25, 0x53, 0x27, 0xa5, 0x53, 0x5b, 0x8d,
	0x2d, 0xaf, 0x91, 0xec, 0xfd, 0xea, 0xc0, 0xd6, 0xe4, 0xe3, 0x49, 0x56, 0xb9, 0x7d, 0x20, 0xe5,
	0x2c, 0x78, 0x50, 0xb8, 0x67, 0xc2, 0xca, 0x0c, 0x67, 0xe5, 0xee, 0xad, 0x95, 0x8b, 0xc3, 0x7f,
	0x75, 0x4e, 0xe7, 0xc5, 0x3a, 0xbc, 0x52, 0x49, 0xca, 0x28, 0x07, 0x11, 0x43, 0xf2, 0xad, 0x03,
	0x2b, 0x1f, 0x47, 0x89, 0x22, 0x77, 0xab, 0xd9, 0x7c, 0x42, 0x8b, 0xe7, 0x5e, 0x75, 0x69, 0xd0,
	0x96, 0xbd, 0x25, 0xf2, 0xbd, 0x03, 0xf5, 0xac, 0x4d, 0x21, 0xaf, 0x4d, 0x87, 0x51, 0x6a, 0x66,
	0xdc, 0xab, 0xae, 0xf3, 0xde, 0x12, 0xf9, 0x06, 0x6a, 0x7b, 0x38, 0xa7, 0x37, 0x16, 0x60, 0xfe,
	0x0b, 0x58, 0xdf, 0x2b, 0x9a, 0xc3, 0x64, 0x96, 0x3b, 0x4a, 0x5d, 0xa4, 0xbb, 0xe5, 0x8f, 0xfd,
	0x57, 0xc8, 0x97, 0x46, 0x9d, 0x61, 0xe6, 0xe6, 0xac, 0x21, 0x98, 0xa5, 0xb7, 0xd4, 0x66, 0x2d,
	0x82, 0xe7, 0x8f, 0x0e, 0x40, 0xd1, 0x9b, 0x90, 0xf6, 0x3c, 0x70, 0xc6, 0xba, 0x18, 0x77, 0x11,
	0x3d, 0x8a, 0xb7, 0x44, 0xbe, 0x73, 0x60, 0xd5, 0x14, 0x36, 0x72, 0x7f, 0x3a, 0xa2, 0xf1, 0xea,
	0xb7, 0x08, 0xff, 0x3c, 0x83, 0x7a, 0x56, 0x6b, 0x66, 0xdd, 0x54, 0xa9, 0x22, 0xb9, 0xf7, 0xa6,
	0x6f, 0x1e, 0x8b, 0x85, 0x1f, 0x1c, 0x68, 0xe4, 0xad, 0x0f, 0xd9, 0x9d, 0x71, 0xac, 0xdc, 0x22,
	0x2d, 0x82, 0x6f, 0x0c, 0x6b, 0x7b, 0x45, 0x6e, 0x9d, 0x09, 0xa8, 0xdc, 0x3f, 0xb9, 0xfe, 0xbc,
	0xdb, 0x47, 0xf4, 0x53, 0xf8, 0x9f, 0xbd, 0x42, 0x6b, 0xb1, 0x33, 0x9f, 0x8a, 0xd2, 0xbd, 0x5f,
	0xc6, 0xec, 0x4d, 0x53, 0x4c, 0xc7, 0xab, 0x2b, 0x79, 0x73, 0x3e, 0x35, 0xd5, 0x5a, 0xfc, 0x2f,
	0x2e, 0x9b, 0xc3, 0x46, 0x1e, 0x27, 0x96, 0xee, 0xc3, 0xf9, 0x6c, 0x5e, 0x32, 0xba, 0xde, 0xfd,
	0xe8, 0xb7, 0xb3, 0x6d, 0xe7, 0x8f, 0xb3, 0x6d, 0xe7, 0xaf, 0xb3, 0x6d, 0xe7, 0xf3, 0xb7, 0xe7,
	0xfb, 0x90, 0xc2, 0xfa, 0x11, 0xc6, 0xd5, 0x2f, 0x37, 0x47, 0x75, 0xf3, 0xd1, 0xe1, 0xe1, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x56, 0x74, 0xa9, 0xe5, 0xe8, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationSetServiceClient is the client API for ApplicationSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationSetServiceClient interface {
	//List returns list of applications
	List(ctx context.Context, in *ApplicationSetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error)
	//Create creates an applicationset
	Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	//Get returns an applicationset by name
	Get(ctx context.Context, in *ApplicationSetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// GetManifests returns applicationset manifests
	GetManifests(ctx context.Context, in *ApplicationSetManifestQuery, opts ...grpc.CallOption) (*apiclient.ManifestResponse, error)
	// Update updates an applicationset
	Update(ctx context.Context, in *ApplicationSetUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// UpdateSpec updates an applicationset spec
	UpdateSpec(ctx context.Context, in *ApplicationSetUpdateSpecRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetSpec, error)
	// Patch patch an application
	Patch(ctx context.Context, in *ApplicationSetPatchRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error)
	//Rollback syncs an applicationset to its target state
	Rollback(ctx context.Context, in *ApplicationSetRollbackRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// GetResource returns single application resource
	GetResource(ctx context.Context, in *ApplicationSetResourceRequest, opts ...grpc.CallOption) (*ApplicationSetResourceResponse, error)
	// PatchResource patch single application resource
	PatchResource(ctx context.Context, in *ApplicationSetResourcePatchRequest, opts ...grpc.CallOption) (*ApplicationSetResourceResponse, error)
	// RunResourceAction run resource action
	RunResourceAction(ctx context.Context, in *ApplicationSetResourceActionRunRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error)
	// DeleteResource deletes a single application resource
	DeleteResource(ctx context.Context, in *ApplicationSetResourceDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error)
}

type applicationSetServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationSetServiceClient(cc *grpc.ClientConn) ApplicationSetServiceClient {
	return &applicationSetServiceClient{cc}
}

func (c *applicationSetServiceClient) List(ctx context.Context, in *ApplicationSetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error) {
	out := new(v1alpha1.ApplicationSetList)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Get(ctx context.Context, in *ApplicationSetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) GetManifests(ctx context.Context, in *ApplicationSetManifestQuery, opts ...grpc.CallOption) (*apiclient.ManifestResponse, error) {
	out := new(apiclient.ManifestResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/GetManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Update(ctx context.Context, in *ApplicationSetUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) UpdateSpec(ctx context.Context, in *ApplicationSetUpdateSpecRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetSpec, error) {
	out := new(v1alpha1.ApplicationSetSpec)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/UpdateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Patch(ctx context.Context, in *ApplicationSetPatchRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error) {
	out := new(ApplicationSetResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Rollback(ctx context.Context, in *ApplicationSetRollbackRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) GetResource(ctx context.Context, in *ApplicationSetResourceRequest, opts ...grpc.CallOption) (*ApplicationSetResourceResponse, error) {
	out := new(ApplicationSetResourceResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) PatchResource(ctx context.Context, in *ApplicationSetResourcePatchRequest, opts ...grpc.CallOption) (*ApplicationSetResourceResponse, error) {
	out := new(ApplicationSetResourceResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/PatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) RunResourceAction(ctx context.Context, in *ApplicationSetResourceActionRunRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error) {
	out := new(ApplicationSetResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/RunResourceAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) DeleteResource(ctx context.Context, in *ApplicationSetResourceDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error) {
	out := new(ApplicationSetResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationSetServiceServer is the server API for ApplicationSetService service.
type ApplicationSetServiceServer interface {
	//List returns list of applications
	List(context.Context, *ApplicationSetQuery) (*v1alpha1.ApplicationSetList, error)
	//Create creates an applicationset
	Create(context.Context, *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error)
	//Get returns an applicationset by name
	Get(context.Context, *ApplicationSetQuery) (*v1alpha1.ApplicationSet, error)
	// GetManifests returns applicationset manifests
	GetManifests(context.Context, *ApplicationSetManifestQuery) (*apiclient.ManifestResponse, error)
	// Update updates an applicationset
	Update(context.Context, *ApplicationSetUpdateRequest) (*v1alpha1.ApplicationSet, error)
	// UpdateSpec updates an applicationset spec
	UpdateSpec(context.Context, *ApplicationSetUpdateSpecRequest) (*v1alpha1.ApplicationSetSpec, error)
	// Patch patch an application
	Patch(context.Context, *ApplicationSetPatchRequest) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(context.Context, *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error)
	//Rollback syncs an applicationset to its target state
	Rollback(context.Context, *ApplicationSetRollbackRequest) (*v1alpha1.ApplicationSet, error)
	// GetResource returns single application resource
	GetResource(context.Context, *ApplicationSetResourceRequest) (*ApplicationSetResourceResponse, error)
	// PatchResource patch single application resource
	PatchResource(context.Context, *ApplicationSetResourcePatchRequest) (*ApplicationSetResourceResponse, error)
	// RunResourceAction run resource action
	RunResourceAction(context.Context, *ApplicationSetResourceActionRunRequest) (*ApplicationSetResponse, error)
	// DeleteResource deletes a single application resource
	DeleteResource(context.Context, *ApplicationSetResourceDeleteRequest) (*ApplicationSetResponse, error)
}

// UnimplementedApplicationSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationSetServiceServer struct {
}

func (*UnimplementedApplicationSetServiceServer) List(ctx context.Context, req *ApplicationSetQuery) (*v1alpha1.ApplicationSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Create(ctx context.Context, req *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Get(ctx context.Context, req *ApplicationSetQuery) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedApplicationSetServiceServer) GetManifests(ctx context.Context, req *ApplicationSetManifestQuery) (*apiclient.ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifests not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Update(ctx context.Context, req *ApplicationSetUpdateRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedApplicationSetServiceServer) UpdateSpec(ctx context.Context, req *ApplicationSetUpdateSpecRequest) (*v1alpha1.ApplicationSetSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpec not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Patch(ctx context.Context, req *ApplicationSetPatchRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Delete(ctx context.Context, req *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Rollback(ctx context.Context, req *ApplicationSetRollbackRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (*UnimplementedApplicationSetServiceServer) GetResource(ctx context.Context, req *ApplicationSetResourceRequest) (*ApplicationSetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (*UnimplementedApplicationSetServiceServer) PatchResource(ctx context.Context, req *ApplicationSetResourcePatchRequest) (*ApplicationSetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResource not implemented")
}
func (*UnimplementedApplicationSetServiceServer) RunResourceAction(ctx context.Context, req *ApplicationSetResourceActionRunRequest) (*ApplicationSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunResourceAction not implemented")
}
func (*UnimplementedApplicationSetServiceServer) DeleteResource(ctx context.Context, req *ApplicationSetResourceDeleteRequest) (*ApplicationSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}

func RegisterApplicationSetServiceServer(s *grpc.Server, srv ApplicationSetServiceServer) {
	s.RegisterService(&_ApplicationSetService_serviceDesc, srv)
}

func _ApplicationSetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).List(ctx, req.(*ApplicationSetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Create(ctx, req.(*ApplicationSetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Get(ctx, req.(*ApplicationSetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_GetManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetManifestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).GetManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/GetManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).GetManifests(ctx, req.(*ApplicationSetManifestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Update(ctx, req.(*ApplicationSetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_UpdateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetUpdateSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).UpdateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/UpdateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).UpdateSpec(ctx, req.(*ApplicationSetUpdateSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Patch(ctx, req.(*ApplicationSetPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Delete(ctx, req.(*ApplicationSetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Rollback(ctx, req.(*ApplicationSetRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).GetResource(ctx, req.(*ApplicationSetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_PatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetResourcePatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).PatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/PatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).PatchResource(ctx, req.(*ApplicationSetResourcePatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_RunResourceAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetResourceActionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).RunResourceAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/RunResourceAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).RunResourceAction(ctx, req.(*ApplicationSetResourceActionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).DeleteResource(ctx, req.(*ApplicationSetResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "applicationset.ApplicationSetService",
	HandlerType: (*ApplicationSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ApplicationSetService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApplicationSetService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationSetService_Get_Handler,
		},
		{
			MethodName: "GetManifests",
			Handler:    _ApplicationSetService_GetManifests_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationSetService_Update_Handler,
		},
		{
			MethodName: "UpdateSpec",
			Handler:    _ApplicationSetService_UpdateSpec_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _ApplicationSetService_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationSetService_Delete_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _ApplicationSetService_Rollback_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ApplicationSetService_GetResource_Handler,
		},
		{
			MethodName: "PatchResource",
			Handler:    _ApplicationSetService_PatchResource_Handler,
		},
		{
			MethodName: "RunResourceAction",
			Handler:    _ApplicationSetService_RunResourceAction_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ApplicationSetService_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/applicationset/applicationset.proto",
}

func (m *ApplicationSetQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Repo) > 0 {
		i -= len(m.Repo)
		copy(dAtA[i:], m.Repo)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Repo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Projects[iNdEx])
			copy(dAtA[i:], m.Projects[iNdEx])
			i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Projects[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Refresh) > 0 {
		i -= len(m.Refresh)
		copy(dAtA[i:], m.Refresh)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Refresh)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetRevisionMetadataQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetRevisionMetadataQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetRevisionMetadataQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetManifestQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetManifestQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetManifestQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validate {
		i--
		if m.Validate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Upsert {
		i--
		if m.Upsert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Applicationset != nil {
		{
			size, err := m.Applicationset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplicationset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validate {
		i--
		if m.Validate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Applicationset != nil {
		{
			size, err := m.Applicationset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplicationset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropagationPolicy) > 0 {
		i -= len(m.PropagationPolicy)
		copy(dAtA[i:], m.PropagationPolicy)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.PropagationPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cascade {
		i--
		if m.Cascade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetUpdateSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetUpdateSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetUpdateSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validate {
		i--
		if m.Validate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplicationset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetPatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetPatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetPatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatchType) > 0 {
		i -= len(m.PatchType)
		copy(dAtA[i:], m.PatchType)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.PatchType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Patch) > 0 {
		i -= len(m.Patch)
		copy(dAtA[i:], m.Patch)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Patch)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetRollbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetRollbackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetRollbackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Prune {
		i--
		if m.Prune {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintApplicationset(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourcePatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourcePatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourcePatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatchType) > 0 {
		i -= len(m.PatchType)
		copy(dAtA[i:], m.PatchType)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.PatchType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Patch) > 0 {
		i -= len(m.Patch)
		copy(dAtA[i:], m.Patch)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Patch)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourceDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourceDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourceDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Orphan {
		i--
		if m.Orphan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourceActionRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourceActionRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourceActionRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Manifest) > 0 {
		i -= len(m.Manifest)
		copy(dAtA[i:], m.Manifest)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Manifest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourcesQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourcesQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourcesQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationsetName) > 0 {
		i -= len(m.ApplicationsetName)
		copy(dAtA[i:], m.ApplicationsetName)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ApplicationsetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApplicationset(dAtA []byte, offset int, v uint64) int {
	offset -= sovApplicationset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationSetQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Refresh)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, s := range m.Projects {
			l = len(s)
			n += 1 + l + sovApplicationset(uint64(l))
		}
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetRevisionMetadataQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetManifestQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Applicationset != nil {
		l = m.Applicationset.Size()
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Upsert {
		n += 2
	}
	if m.Validate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Applicationset != nil {
		l = m.Applicationset.Size()
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Validate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Cascade {
		n += 2
	}
	l = len(m.PropagationPolicy)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetUpdateSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Validate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetPatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Patch)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.PatchType)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetRollbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApplicationset(uint64(m.Id))
	}
	if m.DryRun {
		n += 2
	}
	if m.Prune {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourcePatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Patch)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.PatchType)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourceDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.Orphan {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourceActionRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manifest)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourcesQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationsetName)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApplicationset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApplicationset(x uint64) (n int) {
	return sovApplicationset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationSetQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refresh = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetRevisionMetadataQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetRevisionMetadataQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetRevisionMetadataQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetManifestQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetManifestQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetManifestQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicationset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applicationset == nil {
				m.Applicationset = &v1alpha1.ApplicationSet{}
			}
			if err := m.Applicationset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upsert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upsert = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicationset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applicationset == nil {
				m.Applicationset = &v1alpha1.ApplicationSet{}
			}
			if err := m.Applicationset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cascade = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropagationPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetUpdateSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetUpdateSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetUpdateSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v1alpha1.ApplicationSetSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetPatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetPatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetPatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetRollbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetRollbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetRollbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prune", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prune = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourcePatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourcePatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourcePatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourceDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourceDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourceDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orphan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Orphan = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourceActionRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourceActionRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourceActionRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourcesQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourcesQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourcesQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationsetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationsetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplicationset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApplicationset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApplicationset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApplicationset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApplicationset = fmt.Errorf("proto: unexpected end of group")
)
